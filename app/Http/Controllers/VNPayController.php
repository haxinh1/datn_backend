<?php

namespace App\Http\Controllers;

use App\Models\CartItem;
use Illuminate\Http\Request;
use App\Models\Order;
use App\Models\OrderOrderStatus;
use App\Models\Payment;
use App\Models\Product;
use App\Models\ProductVariant;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;

class VNPayController extends Controller
{
    /**
     * X·ª≠ l√Ω thanh to√°n VNPay
     */
    public function createPayment(Request $request)
    {
        date_default_timezone_set('Asia/Ho_Chi_Minh');

        $validator = Validator::make($request->all(), [
            'order_id' => 'required|exists:orders,id',
            'payment_method' => 'required|in:vnpay,cod'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o',
                'errors' => $validator->errors()
            ], 400);
        }

        $order = Order::findOrFail($request->order_id);

        if ($order->total_amount < 5000) {
            return response()->json(['message' => 'S·ªë ti·ªÅn giao d·ªãch kh√¥ng h·ª£p l·ªá. Ph·∫£i l·ªõn h∆°n 5,000 VND'], 400);
        }

        $payment = Payment::where('name', 'VNPay')->first();
        if (!$payment) {
            return response()->json(['message' => 'Ph∆∞∆°ng th·ª©c thanh to√°n VNPay kh√¥ng t·ªìn t·∫°i'], 400);
        }

        $order->update([
            'payment_id' => $payment->id
        ]);

        $vnp_Url = config('services.vnpay.url');
        $vnp_Returnurl = config('services.vnpay.return_url');
        $vnp_TmnCode = config('services.vnpay.tmn_code');
        $vnp_HashSecret = config('services.vnpay.hash_secret');

        if (!$vnp_HashSecret) {
            Log::error("VNPay Hash Secret is NULL. Ki·ªÉm tra config/services.php!");
            return response()->json(['message' => 'L·ªói h·ªá th·ªëng: Hash Secret ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh'], 500);
        }

        // üîπ X·ª≠ l√Ω vnp_OrderInfo
        $vnp_OrderInfo = "Thanh toan don hang " . preg_replace('/[^a-zA-Z0-9 ]/', '', $order->code);

        // üîπ X√¢y d·ª±ng d·ªØ li·ªáu g·ª≠i ƒë·∫øn VNPay
        $inputData = [
            "vnp_Version" => "2.1.0",
            "vnp_TmnCode" => $vnp_TmnCode,
            "vnp_Amount" => (int) $order->total_amount * 100,
            "vnp_Command" => "pay",
            "vnp_CreateDate" => date("YmdHis"),
            "vnp_CurrCode" => "VND",
            "vnp_IpAddr" => request()->ip(),
            "vnp_Locale" => "vn",
            "vnp_OrderInfo" => $vnp_OrderInfo, // Fix l·ªói encoding Unicode
            "vnp_OrderType" => "billpayment",
            "vnp_ReturnUrl" => $vnp_Returnurl,
            "vnp_TxnRef" => (string) $order->id,
            "vnp_ExpireDate" => date("YmdHis", time() + 1800),
        ];

        if ($request->has('bank_code')) {
            $inputData["vnp_BankCode"] = $request->bank_code;
        }

        // S·∫Øp x·∫øp m·∫£ng & t·∫°o query string
        ksort($inputData);
        $queryString = "";
        foreach ($inputData as $key => $value) {
            if ($value !== null && $value !== '') {
                $queryString .= $key . "=" . urlencode($value) . "&"; // D√πng `urlencode()`
            }
        }
        $queryString = rtrim($queryString, "&");

        // T·∫°o Secure Hash
        $vnp_SecureHash = hash_hmac("sha512", $queryString, $vnp_HashSecret);

        Log::info("VNPay Hash Data (Create Payment):", [$queryString]);
        Log::info("Generated Secure Hash:", [$vnp_SecureHash]);

        // G·ª≠i request sang VNPay
        $queryString .= "&vnp_SecureHash=" . $vnp_SecureHash;
        $vnp_Url .= "?" . $queryString;

        return response()->json([
            "message" => "Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay",
            "payment_url" => $vnp_Url
        ], 200);
    }





    /**
     * X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ VNPay
     */
    public function paymentReturn(Request $request)
    {
        $inputData = $request->all();
        Log::info("VNPay Response Data:", $inputData);

        // Ki·ªÉm tra n·∫øu thi·∫øu `vnp_SecureHash`
        if (!isset($inputData['vnp_SecureHash'])) {
            return response()->json([
                'message' => 'Thi·∫øu m√£ b·∫£o m·∫≠t VNPay',
                'data' => $inputData
            ], 400);
        }

        // L·∫•y Secure Hash t·ª´ VNPay
        $secureHash = trim($inputData['vnp_SecureHash']);
        unset($inputData['vnp_SecureHash'], $inputData['vnp_SecureHashType']); // Lo·∫°i b·ªè ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c

        // ƒê·ªãnh d·∫°ng l·∫°i gi√° tr·ªã `vnp_Amount` (VNPay g·ª≠i v·ªÅ string nh∆∞ng c·∫ßn convert integer)
        if (isset($inputData['vnp_Amount'])) {
            $inputData['vnp_Amount'] = strval(intval($inputData['vnp_Amount']));
        }

        // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi t·∫•t c·∫£ gi√° tr·ªã
        array_walk($inputData, function (&$value, $key) {
            $value = trim(strval($value));
        });

        // S·∫Øp x·∫øp m·∫£ng d·ªØ li·ªáu ƒë√∫ng chu·∫©n VNPay (A-Z)
        ksort($inputData);

        // T·∫°o chu·ªói hash ƒë√∫ng chu·∫©n
        $hashData = [];
        foreach ($inputData as $key => $value) {
            $hashData[] = urlencode($key) . "=" . urlencode($value);
        }
        $hashData = implode("&", $hashData);

        // L·∫•y `hash_secret` t·ª´ config
        $vnp_HashSecret = config('services.vnpay.hash_secret');
        if (!$vnp_HashSecret) {
            Log::error("VNPay Hash Secret is NULL. Ki·ªÉm tra config/services.php!");
            return response()->json(['message' => 'L·ªói h·ªá th·ªëng: Hash Secret ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh'], 500);
        }

        // T·∫°o ch·ªØ k√Ω s·ªë SHA512
        $computedHash = hash_hmac("sha512", $hashData, $vnp_HashSecret);

        // Log ki·ªÉm tra
        Log::info("VNPay Hash Data (Return):", [$hashData]);
        Log::info("Computed Secure Hash:", [$computedHash]);
        Log::info("Secure Hash t·ª´ VNPay:", [$secureHash]);

        // So s√°nh ch·ªØ k√Ω s·ªë (KH√îNG ph√¢n bi·ªát hoa/th∆∞·ªùng)
        if (strcasecmp($computedHash, $secureHash) !== 0) {
            Log::error("X√°c th·ª±c thanh to√°n th·∫•t b·∫°i", [
                'computed_hash' => $computedHash,
                'secure_hash' => $secureHash,
                'input_data' => $inputData
            ]);
            return response()->json([
                'message' => 'X√°c th·ª±c thanh to√°n th·∫•t b·∫°i',
                'computed_hash' => $computedHash,
                'secure_hash' => $secureHash,
                'input_data' => $inputData
            ], 400);
        }

        // üîπ N·∫øu giao d·ªãch th√†nh c√¥ng (`vnp_ResponseCode == 00`)
        if ($inputData['vnp_ResponseCode'] == '00') {
            $order = Order::findOrFail($inputData['vnp_TxnRef']);
            // Ch·ªâ tr·ª´ stock n·∫øu ch∆∞a tr·ª´ tr∆∞·ªõc ƒë√≥
            if ($order->status_id != 2) {  // N·∫øu ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n
                foreach ($order->orderItems as $item) {
                    if ($item->product_variant_id) {
                        ProductVariant::where('id', $item->product_variant_id)->decrement('stock', $item->quantity);
                    } else {
                        Product::where('id', $item->product_id)->decrement('stock', $item->quantity);
                    }
                }

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ thanh to√°n
                $order->update([
                    'status_id' => 2,
                    'payment_id' => Payment::where('name', 'VNPay')->value('id')
                ]);
            }


            // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi v√†o `order_order_statuses`
            OrderOrderStatus::create([
                'order_id' => $order->id,
                'order_status_id' => 2, // Tr·∫°ng th√°i "ƒê√£ thanh to√°n"
                'note' => 'Thanh to√°n VNPay th√†nh c√¥ng.',
            ]);

            return response()->json([
                'message' => 'Thanh to√°n th√†nh c√¥ng',
                'order' => $order
            ], 200);
        } else {
            return response()->json([
                'message' => 'Thanh to√°n kh√¥ng th√†nh c√¥ng'
            ], 400);
        }
    }
}
